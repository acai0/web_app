{"remainingRequest":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\src\\views\\createConversation.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\src\\views\\createConversation.vue","mtime":1648807631892},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\css-loader\\dist\\cjs.js","mtime":1648803905877},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1648803911499},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\postcss-loader\\src\\index.js","mtime":1648803908466},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1648803903589},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648803903617},{"path":"C:\\Users\\chris\\Downloads\\Coop-test\\Coop-main\\node_modules\\vue-loader\\lib\\index.js","mtime":1648803909434}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4uL3Njc3MvYnVsbWEuc2NzcyI7Cg=="},{"version":3,"sources":["createConversation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgKA","file":"createConversation.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <section class=\"hero is-fullheight\">\n    <Header />\n    <div class=\"hero-body\">\n      <div class=\"container\">\n        <div class=\"columns is-centered\">\n          <div class=\"column is-12-tablet is-11-desktop is-10-widescreen\">\n            <h4 class=\"title is-4 has-text-centered\">Nouvel event</h4>\n            <form class=\"box\" @submit.prevent=\"createConversation\">\n              <div class=\"field\">\n                <label class=\"label\">Titre</label>\n                <div class=\"control\">\n                  <input class=\"input\" v-model=\"conversation.topic\" />\n                </div>\n              </div>\n              <div class=\"field\">\n                <label class=\"label\">Description</label>\n                <div class=\"control\">\n                  <input class=\"input\" v-model=\"conversation.label\" />\n                </div>\n              </div>\n               <div class=\"field\">\n                <label class=\"label\">Date Heure</label>\n                <div class=\"control\">\n                  <input class=\"input\" v-model=\"conversation.date\" />\n                </div>\n              </div>\n              <div class=\"field\">\n                <label class=\"label\">Lieu</label>\n                <div class=\"control\">\n                  <input class=\"input\" v-model=\"conversation.lieu\" />\n                </div>\n              </div>\n              <template>\n <l-map\n                  v-if=\"showMap\"\n                  :zoom=\"zoom\"\n                  :center=\"initialLocation\"\n                  :options=\"mapOptions\"\n                  style=\"height: 350px; width: 100%\"\n                  @update:center=\"centerUpdate\"\n                  @update:zoom=\"zoomUpdate\"\n                  @click=\"handleMapClick\"\n                >\n                  <l-tile-layer :url=\"url\" :attribution=\"attribution\" />\n                  <l-marker\n                    :key=\"index\"\n                    v-for=\"(m, index) in markers\"\n                    :lat-lng=\"m.pos\"\n                  >\n                    <l-tooltip\n                      :options=\"{ permanent: true, interactive: true }\"\n                      >{{ place }}</l-tooltip\n                    >\n                  </l-marker>\n                                </l-map>\n                                </template>\n              <div class=\"buttons\">\n                <button class=\"button is-info is-outlined\">Poster</button>\n                <router-link class=\"button is-outlined\" to=\"/\"\n                  >Annuler</router-link\n                >\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { latLng } from \"leaflet\";\nimport { LMap, LTileLayer, LMarker, LPopup, LTooltip } from \"vue2-leaflet\";\nimport { Icon } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\nexport default {\n  components: {\n      LMap,\n    LTileLayer,\n    LMarker,\n    LPopup,\n    LTooltip\n  },\n  data() {\n    return {\n      conversation: {\n        label: \"\",\n        topic: \"\",\n      },\n        initialLocation: [48.6829037, 6.1613428],\n      markers: [],\n      x: false,\n      y: false,\n      zoom: 15,\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution:\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      withPopup: latLng(48.6829037, 6.1613428),\n      showParagraph: false,\n      withTooltip: latLng(48.6829037, 6.1613428),\n      currentZoom: 15,\n      currentCenter: latLng(location.x, location.y),\n      mapOptions: {\n        zoomSnap: 0.5,\n      },\n      showMap: true,\n    };\n  },\n  methods: {\n    createConversation() {\n      this.$api\n        .post(\"channels\", this.conversation)\n        .then((response) => {\n          this.$router.push({\n            name: \"Conversation\",\n            params: { id: response.data.id },\n            idCreateur: this.$store.state.member.id,\n          });\n        })\n        .catch((error) => {\n          alert(error.response.data.message);\n        });\n    },\n       getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.updateLocation);\n      }\n    },\n    updateLocation(position) {\n      let currentLocation = [\n        position.coords.latitude,\n        position.coords.longitude,\n      ];\n      this.initialLocation = currentLocation;\n    },\n\n    zoomUpdate(zoom) {\n      this.currentZoom = zoom;\n    },\n    centerUpdate(center) {\n      this.currentCenter = center;\n    },\n    handleMapClick(event) {\n      const pos = L.latLng(event.latlng.lat, event.latlng.lng);\n      this.markers = [];\n      this.markers.push({ pos: pos });\n      this.x = event.latlng.lat;\n      this.y = event.latlng.lng;\n    },\n  },\n};\n</script>\n<style lang=\"scss\">\n@import \"../scss/bulma.scss\";\n</style>\n"]}]}